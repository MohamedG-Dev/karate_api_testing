Feature Files to be referred as part of learning:
	Package name: com.api.automation.getrequest
		1. get_Request.feature and Runner class is TestGetRunner.java
		2. responseMatcher.feature and Runner class is TestResponseGetRunner.java
		3. validateJSONArray.feature and Runner class is ValidateJSONArray.java
		4. validateXMLResponse.feature and Runner class is ValidateXMLResponse.java
		5. fuzzyMatcher.feature and Runner class is FuzzyMatcher.java
		6. karateVariables.feature and Runner class is KarateVariable.java
		7. validationUsingFile.feature and Runner class is ValidationUsingExternalFile.java
		
		com.api.automation.postrequest
		1. postRequest.feature and Runner class is PostRequestValidation.java
		2. postRequestExternalFile.feature and Runner class is PostRequestValidation.java
		3. schemaValidation.feature and Runner class is SchemaValidation.java
		4. javascriptExecutor.feature and Runner class is JavaScriptExecutor.java
		5. embeddedExpression.feature and Runner class is EmbeddedExpression.java
		6. jsonPath.feature and Runner class is JSONPath.java

Karate Keywords: method,get,status,path,header,deep,contains,response,match,print

Resources: https://github.com/karatelabs/karate
_______________________________________________________________________________________________________________________________________________________
|Marker			|		Description
|#ignore		|Skip comparison for this field even if the data element or JSON key is present
|#null			|Expects actual value to be null, and the data element or JSON key must be present
|#notnull		|Expects actual value to be not-null
|#present		|Actual value can be any type or even null, but the key must be present (only for JSON / XML, see below)
|#notpresent	|Expects the key to be not present at all (only for JSON / XML, see below)
|#array			|Expects actual value to be a JSON array
|#object		|Expects actual value to be a JSON object
|#boolean		|Expects actual value to be a boolean true or false
|#number		|Expects actual value to be a number
|#string		|Expects actual value to be a string
|#uuid			|Expects actual (string) value to conform to the UUID format
|#regex STR		|Expects actual (string) value to match the regular-expression 'STR' (see examples above)
|#? EXPR		|Expects the JavaScript expression 'EXPR' to evaluate to true, see self-validation expressions below
|#[NUM] EXPR	|Advanced array validation, see schema validation
|#(EXPR)	For |completeness, embedded expressions belong in this list as well

Note that #present and #notpresent only make sense when you are matching within a JSON or XML context or using a JsonPath or XPath on the left-hand-side.
* def json = { foo: 'bar' }
* match json == { foo: '#present' }
* match json.nope == '#notpresent'

The rest can also be used even in 'primitive' data matches like so:
* match foo == '#string'
# convenient (and recommended) way to check for array length
* match bar == '#[2]'

Optional Fields
If two cross-hatch # symbols are used as the prefix (for example: ##number), it means that the key is optional or that the value can be null.
* def foo = { bar: 'baz' }
* match foo == { bar: '#string', ban: '##string' }
===============================================================================
'_' -> this is called as fuzzy matcher

Karate variables: Syntax for variable creation: <Gherkin keyword> <def> <variable_name> = <value>
#use variable for repeating value
#Storing the data in external file
#In matcher expression
#Passing the data from one feature file to another
==================================================================================
JsonPath: 
resource url for more reference - https://github.com/json-path/JsonPath
<dependency>
    <groupId>com.jayway.jsonpath</groupId>
    <artifactId>json-path</artifactId>
    <version>2.9.0</version>
</dependency>

-JsonPath expressions always refer to a JSON structure in the same way as XPath expression are used in combination with an XML document.
-The "root member object" in JsonPath is always referred to as $ regardless if it is an object or array.
-JsonPath expressions can use the dot–notation -> $.store.book[0].title
or the bracket–notation -> $['store']['book'][0]['title']

Operators
__________________________________________________________________________________________________
Operator						|	Description
	$							|The root element to query. This starts all path expressions.
	@							|The current node being processed by a filter predicate.
	*							|Wildcard. Available anywhere a name or numeric are required.
	..							|Deep scan. Available anywhere a name is required.
	.<name>						|Dot-notated child
	['<name>' (, '<name>')]		|Bracket-notated child or children
	[<number> (, <number>)]		|Array index or indexes
	[start:end]					|Array slice operator
	[?(<expression>)]			|Filter expression. Expression must evaluate to a boolean value.
